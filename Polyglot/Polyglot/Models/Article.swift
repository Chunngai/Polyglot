//
//  Article.swift
//  Polyglot
//
//  Created by Sola on 2022/12/21.
//  Copyright Â© 2022 Sola. All rights reserved.
//

import Foundation

struct Paragraph: Codable {
    
    var id: String
    var cDate: Date
    
    var text: String
    var meaning: String?
    
    // For Youtube video captions.
    var startMs: Double?
    var durationMs: Double?
    
    init(text: String, meaning: String? = nil, startMs: Double? = nil, durationMs: Double? = nil) {
        
        self.id = UUID().uuidString
        self.cDate = Date()
        
        self.text = text
        self.meaning = meaning
        
        self.startMs = startMs
        self.durationMs = durationMs
        
    }
    
    static let textMeaningSeparator = "\n"
    
    init(from paraString: String) {
        
        let text: String!
        let meaning: String!
        
        let splits: [String] = paraString.strip().split(with: Paragraph.textMeaningSeparator)
        text = splits[0]
        if splits.count == 2 {
            meaning = splits[1]
        } else {
            meaning = nil
        }
        
        self.init(text: text, meaning: meaning)
    }
    
}

struct Article {
    
    var id: String
    var cDate: Date  // Creation date.
    var mDate: Date  // Modification date.
    
    var title: String
    var topic: String?
    var paras: [Paragraph]
    var source: String?
        
    init(title: String, topic: String? = nil, body: String, source: String? = nil) {
                
        self.cDate = Date()
        self.id = UUID().uuidString
        self.mDate = cDate
        
        self.title = title.strip().normalizeQuotes()
        self.topic = topic?.strip()
        self.paras = Article.makeParas(from: body)
        self.source = source?.strip()
        
    }
    
    init(title: String, topic: String? = nil, captionEvents: [YoutubeVideoParser.CaptionEvent], source: String? = nil) {
                
        self.cDate = Date()
        self.id = UUID().uuidString
        self.mDate = cDate
        
        self.title = title.strip().normalizeQuotes()
        self.topic = topic?.strip()
        self.paras = Article.makeParas(from: captionEvents)
        self.source = source?.strip()
        
    }
    
    mutating func update(newTitle: String? = nil, newTopic: String? = nil, newBody: String? = nil, newSource: String? = nil) {
        
        if let newTitle = newTitle {
            self.title = newTitle.strip().normalizeQuotes()
        }
        
        if let newTopic = newTopic {
            self.topic = newTopic.strip()
        }
        
        if let newBody = newBody {
            updateParas(with: newBody)
        }
        
        if let newSource = newSource {
            self.source = newSource.strip()
        }
        
        self.mDate = Date()
        
    }
    
    mutating func update(newTitle: String? = nil, newTopic: String? = nil, newCaptionEvents: [YoutubeVideoParser.CaptionEvent]? = nil, newSource: String? = nil) {
        
        if let newTitle = newTitle {
            self.title = newTitle.strip().normalizeQuotes()
        }
        
        if let newTopic = newTopic {
            self.topic = newTopic.strip()
        }
        
        if let newCaptionEvents = newCaptionEvents {
            updateParas(with: newCaptionEvents)
        }
        
        if let newSource = newSource {
            self.source = newSource.strip()
        }
        
        self.mDate = Date()
        
    }
}

extension Article {
    
    static let paraSeparator: String = "\n\n"
    
    private static func makeParas(from body: String) -> [Paragraph] {
        
        // Expected body format:
        // text 1
        // meaning 1
        //
        // text 2
        // meaning 2
        //
        // ...
        let paraStrings = body
            .strip()
            .normalizeQuotes()
            .replaceMultipleBlankLinesWithSingleLine()
            .replaceMultipleSpacesWithSingleOne()
            .split(with: Article.paraSeparator)
        
        var paras: [Paragraph] = []
        for paraString in paraStrings {
            if paraString.strip().isEmpty {
                continue
            }
            paras.append(Paragraph(from: paraString))
        }
        
        return paras
    }
    
    private static func makeParas(from captionEvents: [YoutubeVideoParser.CaptionEvent]) -> [Paragraph] {
        
        return captionEvents.map { captionEvent in
            var segs = captionEvent.segs
            segs = segs
                .strip()
                .normalizeQuotes()
                .replaceMultipleSpacesWithSingleOne()
            return Paragraph(
                text: segs,
                startMs: captionEvent.startMs,
                durationMs: captionEvent.durationMs
            )
        }
        
    }
    
    private mutating func updateParas(with newBody: String) {
        
        let paraStringsInNewBody = newBody
            .strip()
            .normalizeQuotes()
            .replaceMultipleBlankLinesWithSingleLine()
            .replaceMultipleSpacesWithSingleOne()
            .split(with: Article.paraSeparator)
        
        var newParas: [Paragraph] = []
        for paraStringInNewBody in paraStringsInNewBody {
            if paraStringInNewBody.strip().isEmpty {
                continue
            }
            let paraInNewBody: Paragraph = Paragraph(from: paraStringInNewBody)
            
            // Check if the para is in the original paras.
            var isNew: Bool = true
            for paraInOldParas in self.paras {
                if paraInNewBody.text == paraInOldParas.text
                    && paraInNewBody.meaning == paraInOldParas.meaning {
                    
                    newParas.append(paraInOldParas)
                    isNew = false
                    
                    break
                }
            }
            if isNew {
                newParas.append(paraInNewBody)
            }
        }
        
        self.paras = newParas
    }
    
    private mutating func updateParas(with newCaptionEvents: [YoutubeVideoParser.CaptionEvent]) {
        self.paras = Self.makeParas(from: newCaptionEvents)
    }
    
}

extension Article: Codable {
    
    enum CodingKeys: String, CodingKey {
        
        case id
        case cDate
        case mDate
        
        case title
        case topic
        case paras
        case source
        
        // Old vars.
        
        case creationDate  // cDate.
        case modificationDate  // mDate.
        
        case body  // paras
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(cDate, forKey: .cDate)
        try container.encode(mDate, forKey: .mDate)
        
        try container.encode(title, forKey: .title)
        try container.encode(topic, forKey: .topic)
        try container.encode(paras, forKey: .paras)
        try container.encode(source, forKey: .source)
    }
    
    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        
        do {
            id = try values.decode(String.self, forKey: .id)
        } catch {
            id = UUID().uuidString
        }
        
        do {
            cDate = try values.decode(Date.self, forKey: .cDate)
        } catch {
            cDate = try values.decode(Date.self, forKey: .creationDate)
        }
        
        do {
            mDate = try values.decode(Date.self, forKey: .mDate)
        } catch {
            mDate = try values.decode(Date.self, forKey: .modificationDate)
        }
        
        title = try values.decode(String.self, forKey: .title)
        
        do {
            topic = try values.decode(String?.self, forKey: .topic)
        } catch {
            topic = nil
        }
        
        do {
            paras = try values.decode([Paragraph].self, forKey: .paras)
        } catch {
            let body = try values.decode(String.self, forKey: .body)
            paras = Article.makeParas(from: body)
        }
        
        source = try values.decode(String?.self, forKey: .source)
    }
}

extension Article {
    
    // MARK: - IO
    
    static func fileName(for lang: LangCode) -> String {
        return "articles.\(lang.rawValue).json"
    }
    
    static func load(for lang: LangCode) -> [Article] {
        do {
            let articles = try readDataFromJson(
                fileName: Article.fileName(for: lang),
                type: [Article].self
            ) as? [Article] ?? []
            return articles
        } catch {
            print(error)
            exit(1)
        }
    }
    
    static func save(_ articles: inout [Article], for lang: LangCode) {
        do {
            try writeDataToJson(
                fileName: Article.fileName(for: lang),
                data: articles
            )
        } catch {
            print(error)
            exit(1)
        }
    }
    
}

extension Article {
    
    static func metaDataFileName(for lang: LangCode) -> String {
        return "articles.meta.\(lang.rawValue).json"
    }
    
    static func loadMetaData(for lang: LangCode) -> [String:String] {
        do {
            let metaData = try readDataFromJson(
                fileName: Article.metaDataFileName(for: lang),
                type: [String: String].self
            ) as? [String:String] ?? [:]
            return metaData
        } catch {
            print(error)
            exit(1)
        }
    }
    
    static func saveMetaData(_ metaData: inout [String:String], for lang: LangCode) {
        do {
            try writeDataToJson(
                fileName: Article.metaDataFileName(for: lang),
                data: metaData
            )
        } catch {
            print(error)
            exit(1)
        }
    }
    
}

extension Article {
    
    static let samples: [Article] = [
        Article(title: "æ¥åªæ¥éä¸­å½AIèªå¨çæç»ååéè®®ï¼èä½æä½å¨ï¼", body: "ä¸­å½ã®ã¤ã³ã¿ã¼ãããã§äººå·¥ç¥è½ï¼AIï¼ãä½¿ã£ã¦å¶ä½ããçµµç»ãã¤ã©ã¹ããæ¬¡ãã¨ç»å ´ãã¦ãããç»åçæAIã¯æ°ããªå¨¯æ¥½ã¨ãã¦çãä¸ãã£ã¦ããä¸æ¹ããçä½è¡çºã§ã¯ãªãããã¨ããæ¹å¤ãããAIã¢ã¼ãã«ã¯èä½æ¨©ãçºçããããã¨ããè­°è«ãèµ·ãã¦ããã\nå¨ä¸­å½çäºèç½ä¸ï¼ä½¿ç¨äººå·¥æºè½ï¼AIï¼å¶ä½çç»ç»ãæå¾æ¥è¿ä¸æ­å°åå¸åºæ¥ï¼ä½ä¸ºä¸ç§æ°åå¨±ä¹æ¹å¼é¢åè¿½æ§çåæ¶ï¼ä¹ææ¹å¤çå£°é³åçï¼âè¿æ¯ä¸æ¯ä¸ç§å½çªè¡ä¸ºï¼ââAIèºæ¯æ¯å¦ä¼äº§çèä½æé®é¢ï¼âç­ä¹å¯¼è´ç½æ°è®®è®ºçº·çº·ã\n\nç»åçæAIã¨ã¯ãã­ã¼ã¯ã¼ããæã¡è¾¼ãã ãã§ã¤ã¡ã¼ã¸ã«åã£ãç»åãèªåçæãããã®ã§ãèª°ã§ãä¸ç¬ã«ãç¥çµµããåµä½ãããã¨ãã§ãããä¸ççã«ããããã¸ã£ã¼ãã¼ï¼Midjourneyï¼ãããã¹ãã¼ãã«ã»ãã£ãã¥ã¼ã¸ã§ã³ï¼Stable Diffusionï¼ãã¨ãã£ããã¼ã«ãåºã¾ã£ã¦ããã»ãããä¸­å½ã®ã°ã¼ã°ã«ãã¨å¼ã°ããITå¤§æã»ç¾åº¦ï¼Baiduï¼ãéçºãããERNIE-ViLGããä¸­å½ã§ã¯äººæ°ã ã\næè°ç»åçæAIï¼æ¯ä¸ç§ä»éè¦è¾å¥å³é®è¯å³å¯èªå¨çæç¬¦åå¶å°è±¡ç»ä½çå·¥å·ï¼ä»»ä½äººé½è½å¨ä¸ç¬é´åä½åºâç¥ç»âãä»ä¸çèå´æ¥è¯´ï¼é¤äºä»¥MidjourneyåStable Diffusionç­å·¥å·ä¼ æ­ä»¥å¤ï¼è¢«ç§°ä¸ºâä¸­å½çè°·æ­âçITå¤§åå¬å¸ç¾åº¦å¼åçâERNIE-ViLGâå¨ä¸­å½é¢å·äººæ°ã", source: "https://www.baidu.com"),
        Article(title: "ä¸å¸¦çå³çæ ç³è¶ççå¥½ååï¼", body: "ãã®ã»ã©ãç¡ç³é£²æãåæ°æ£®æããã©ã³ãã®ãçè¶ãã·ãªã¼ãºãå¨é¢ãªãã¥ã¼ã¢ã«ãããããã¾ã§å¥ã£ã¦ããç ç³ä»£ç¨åã®ã¨ãªã¹ãªãã¼ã«ãåææããé¤å»ãããçã¿ã®ãªãç¡ç³è¶ã«çã¾ãå¤ãã£ãã\nbbb\n\nã¹ã¼ãã¼ãåæããã¨ããã§ã¯ãä»ã®ç¡ç³è¶ãã©ã³ãã«ã¯ãããã©ã«ã¦ã©ã¼ã¿ã¼ã¡ã¼ã«ã¼ã®è¾²å¤«å±±æ³åä¸ã®ãæ±æ¹æ¨¹èãã·ãªã¼ãºãã¯ããããµã³ããªã¼ãæ·³è¶èãè¶éçãªã©ããã£ãã\n\nã¾ããè¶ããªã³ã¯ãã§ã¼ã³ã®å¥éªã®è¶ããã®ã»ã©ããã®ç´å¶åºã§ãåºåã§ä½ããè¶ããªã³ã¯ã¨ãããããã«å¥ããã«ã¼ããã£ã¼ãå«ãçã¿ã®ããååã«ãç³è³ªã¼ã­ã§å¤©ç¶ã®ç ç³ä»£ç¨åã§ããç¾æ¼¢æãå¨é¢çã«ä½¿ç¨ãããã¨ãæããã«ããã\n\nä»ã§ã¯ãç³è³ªã¼ã­ã®è¶é£²æãé¸ã¶è¥èãå¢ãç¶ãã¦ãããã½ã¼ã·ã£ã«ã³ãã¼ã¹ãã©ãããã©ã¼ã ãå°ç´æ¸ãã§ãã«ã­ãªã¼ã»ç³è³ªã¼ã­ã®ãã«ã¯ãã£ããæ¤ç´¢ããã¨ã5åä»¶ãè¶ãããã¼ããããããããæ§ããªãã©ã³ãã®ä½ç³ã»ä½ã«ã­ãªã¼ã®ããããé£²æãç´¹ä»ããäººããããç³è³ªã¼ã­ã®ç»å ´ã¯ãå¥åº·ãªé£çæ´»ãå¿åããæ¶è²»èã®ãã¼ãºãæºããã¦ããã\n\næ¥­çé¢ä¿èã¯ããæ°ããã¹ã¿ã¤ã«ã®ãè¶é£²æã¯ãååç«¶äºã«ããã¦ãè¶èã®ç«¶äºããããããã³ã°ãããã«ã¼ãã®ç«¶äºãããä¹³è£½åã®ç«¶äºãã®æ®µéãçµã¦ãã¦ãããä»ã¯ãç³è³ªã®ç«¶äºãã«çªå¥ãã¦ãããã¨ã®è¦æ¹ãç¤ºãã\n\nä¸­å½ã®ãã¼ã¿ãµã¼ãã¹æ©é¢ã®é¶ç¹ææ°ãçºè¡¨ããã2022å¹´ä¸­å½ç¡ç³è¶é£²æç£æ¥­ã¤ã³ãµã¤ãå ±åãã«ããã¨ãç¡ç³è¶é£²æç£æ¥­ã¯æé·æ®µéã«å¥ã£ã¦ãããç¡ç³è¶é£²æå¸å ´ã®è¦æ¨¡ã¯2014å¹´ã®6ååï¼1åã¯ç´19.6åï¼ãã2020å¹´ã®48å5åä¸åã«å¢å ããè¤åå¹´éæé·çã¯40ï¼ãè¶ããã", source: "https://www.baidu.com"),
        Article(title: "æ¯å¤©å«æ¯æ°´âççå¥åº·åï¼", body: "ãããä¸ã§ã¯ãå¥åº·ã®ããã«1æ¥ã«8æ¯ã®æ°´(ç´2ãªããã«)ãé£²ãã¨è¯ããã¨ããèª¬ãããè¦ãããããããã«ã¯ç§å­¦çæ ¹æ ã¯ããã®ã ãããï¼11æ25æ¥ã«ãå½éå­¦è¡èªããµã¤ã¨ã³ã¹ãã«æ²è¼ãããç ç©¶ã¯ãããã®ä½ã«ãããï¼æ¥ã®æ°´åã®åºå¥ãï¼ä»£è¬åè»¢éï¼ã®æ³åãå°ãåºãã¦ãããããã¦ãé£²ãå¿è¦ãããæ°´ã®éã«å¯¾ããå¤ãã®äººãã®è¦æ¹ãè¦ãå½¢ã¨ãªã£ããç ç©¶ã«ããã¨ãã1æ¥8æ¯ã®æ°´ãã¯ãå¤§é¨åã®äººã«ã¨ã£ã¦ã¯å¿è¦ãªéãä¸åã£ã¦ããå¯è½æ§ãããããã ã\nccc\n\nåç ç©¶ã¯ãä¸­å½ç§å­¦é¢æ·±ã»ã³åé²æè¡ç ç©¶é¢å»è¬æãæ·±ã»ã³çå·¥å¤§å­¦ï¼ç­¹ï¼è¬å­¦é¢ç§ç ãã¼ã ãå½éãã¼ã ç´100ãã¼ã ã¨å±åã§ã26ã¶å½ã«ä½ãçå¾8æ¥ã®ä¹³åãã96æ­³ã®é«é½¢èã¾ã§ã®ç·å¥³è¨5604äººãå¯¾è±¡ã«å®æ½ãããããã¦ãããã®å¨ã©ã¤ããµã¤ã¯ã«ã§ä½ã«ãããæ°´ã®ä»£è¬åè»¢ã®æ³åãä¸çã§åãã¦å²ãåºããã\n\nããã®çå½ç¶­æã«ã¯ãæ°´ãå¿è¦ä¸å¯æ¬ ã ãæ°´ã®ä»£è¬åè»¢éã¨ã¯åºå¥ããæ°´åãæããäººãå¿è¦ãªæ°´ã®éãããªãã®ç¨åº¦åæ ãã¦ããã¨è¨ããã\n\nç ç©¶ã§ã¯ã1æ¥ã®æ°´ã®ä»£è¬åè»¢ã¯ãç·æ§ã§20â35æ­³å¹³å4.2ãªããã«ãå¥³æ§ã§ã¯30â60æ­³ã§å¹³å3.3ãªããã«ãããã¦ãå¹´é½¢ãä¸ããã«ã¤ãã¦ããã®éã¯æ¸ãã90æ­³ä»£ã§ã¯ç·å¥³ã¨ãã«ç´2.5ãªããã«ã¾ã§ä¸ãã£ã¦ããã\n\nãã ãæ°´ã®ä»£è¬åè»¢éã¯é£²ãå¿è¦ãããæ°´ã®éã¨åãã§ã¯ãªãç¹ã«ã¯æ³¨æãå¿è¦ã ãä¾ãã°ã20ä»£ç·æ§ã®æ°´ã®ä»£è¬åè»¢éã¯4.2ãªããã«ã§ãããã®ã®ã1æ¥4.2ãªããã«ã®æ°´ãé£²ãå¿è¦ãããã¨ããããã§ã¯ãªãããªããªããä½åã®ã¨ãã«ã®ã¼ä»£è¬ã®éç¨ã§ç£çãããæ°´ãå¨ä½ã®ç´15ï¼å ããã»ããæ®ãã®85ï¼ã®ãã¡ãååãé£ç©ãããããååãé£²ãæ°´ã§æåãããã¨ã«ãªãããã ããã®ãããé£²ãå¿è¦ãããæ°´ã®éã¯1æ¥1.5â1.8ãªããã«ã¨ãããã¨ã«ãªãã\n\nã¾ããå¥³æ§ã®éèèªæåã¯ç·æ§ããå°ãªããããå¥³æ§ãé£²ãå¿è¦ãããæ°´ã®éã¯ç·æ§ãããå°ãªãã20ä»£ã®å ´åã1æ¥1.3â1.4ãªããã«ãç®å®ã¨ãªãã¨ããã\n\nç ç©¶èã¯ããç ç©¶çµæããè¦ã¦1æ¥ã«8æ¯ã®æ°´ãé£²ãã¨ããã®ã¯ãå¤§é¨åã®äººã«ã¨ã£ã¦ã¯å¤ãããå¯è½æ§ããããã¨ææãã¦ããã\n\nã¾ããç ç©¶ã§ã¯ãæäººã«éã£ã¦è¦ãã¨ã1æ¥ã«ä½æ°´åéã®5ï¼ããæ°´ã®ä»£è¬åè»¢ãèµ·ãããªãäººãããä¸æ¹ã§ã20ï¼ãã®æ°´ã®ä»£è¬åè»¢ãçããäººããããåäººå·®ãããªãå¤§ãããã¨ãåãã£ããå¹´é½¢ãæ§å¥ãä½ãã§ããå½ãªã©ã«ãã£ã¦ããé£²ãå¿è¦ãããæ°´ã®éã¯ç°ãªãããã®ãããä¸å¾ã«ç¤ºãããé£²ãå¿è¦ãããæ°´ã®éããå¨ã¦ã®äººã®å¥åº·ã«æçã§ããã¨ããããã§ã¯ãªãã\n\nã¾ãåç ç©¶ã®åæã§ã¯ãæ°æ¸©ã¨æ¹¿åº¦ãé«ãå ´æãæ¨é«ã®é«ãå°åã§çæ´»ãã¦ããäººãã¢ã¹ãªã¼ããå¦å©¦ãæä¹³æã®å¥³æ§ãæ¿ããéåãããäººãªã©ã®æ°´ã®ä»£è¬åè»¢çãé«ãã£ããå ãã¦ãçºå±éä¸å½ãèä½å´åã®å¤ãäººã¯é«ãæ°´ã®ä»£è¬åè»¢çãç¤ºããæ¥å¸¸çã«ã¹ãã¼ãããããã¨ãæ°´ã®ä»£è¬åè»¢çãé«ãã¦ããã", source: "https://www.baidu.com")
    ]
}
